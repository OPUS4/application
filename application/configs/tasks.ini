
; Configuration of the tasks to be run by the cron triggered task scheduler.
;
; For each task the following configuration is needed:
; Enable/disable the task: true or false
; crontasks.taskname.enabled = true
; Classname of the task to be run
; crontasks.taskname.class = "Application_Task_DummyTask1"

; If there are values to be set for the task class/object
; crontasks.taskname.options.parameterName1 = "value1"
; crontasks.taskname.options.parameterName2 = "value2"

; The task schedule expression (equivalent to a Linux cron schedule expression)
; if not configured "*/1 * * * *" will be used as the default
; taskname.schedule = "*/1 * * * *"

; Set preventOverlapping to true if a task is not allowed to overlap a still running previous instance
; taskname.preventOverlapping = true

checkConsistencyTask.enabled = false
checkConsistencyTask.class = "Application_Job_CheckConsistencyJob"
checkConsistencyTask.schedule = "*/1 * * * *"
checkConsistencyTask.preventOverlapping = false

cleanTemporariesTask.enabled = false
cleanTemporariesTask.class = "Application_Job_CleanTemporariesJob"
; Duration e.g., P2D, P4M
cleanTemporariesTask.options.duration = "P2D";
cleanTemporariesTask.schedule = "0 0 * * *"
cleanTemporariesTask.preventOverlapping = false

embargoUpdateTask.enabled = false
embargoUpdateTask.class = "Application_Job_EmbargoUpdateJob"
embargoUpdateTask.schedule = "*/1 * * * *"
embargoUpdateTask.preventOverlapping = false

importMetadataTask.enabled = false
importMetadataTask.class = "Application_Job_ImportMetadataJob"
importMetadataTask.schedule = "*/1 * * * *"
importMetadataTask.preventOverlapping = false

registerLocalDoisTask.enabled = false
registerLocalDoisTask.class = "Application_Job_RegisterLocalDoisJob"
registerLocalDoisTask.schedule = "*/1 * * * *"
registerLocalDoisTask.preventOverlapping = false

sendNotificationTask.enabled = false
sendNotificationTask.class = "Application_Job_SendNotificationJob"
; Mailversand alle 5 Minuten
sendNotificationTask.schedule = "*/5 * * * *"
sendNotificationTask.preventOverlapping = false

sendReviewRequestTask.enabled = false
sendReviewRequestTask.class = "Application_Job_SendReviewRequestJob"
sendReviewRequestTask.schedule = "*/1 * * * *"
TESTTsendReviewRequestTaskESTTEST.preventOverlapping = false

solrUpdateTask.enabled = false
solrUpdateTask.class = "Application_Job_SolrUpdateJob"
; Solr-Indexierung alle 5 Minuten
solrUpdateTask.schedule = "*/5 * * * *"
solrUpdateTask.preventOverlapping = false

updateDocumentCacheTask.enabled = true
updateDocumentCacheTask.class = "Application_Job_UpdateDocumentCacheJob"
updateDocumentCacheTask.schedule = "*/1 * * * *"
updateDocumentCacheTask.preventOverlapping = false

verifyLocalDoisTask.enabled = false
verifyLocalDoisTask.class = "Application_Job_VerifyLocalDoisJob"
; prüfe nur lokale DOIs, die vor mindestens 24h bei DataCite registriert wurden
; setze den Wert von $delayInHours auf null, um alle registrierten DOIs unabhängig
; vom Registrierungszeitpunkt zu prüfen
verifyLocalDoisTask.options.delayInHours = 24
verifyLocalDoisTask.schedule = "*/1 * * * *"
verifyLocalDoisTask.preventOverlapping = false

checkWorkspaceFilesTask.enabled = false
checkWorkspaceFilesTask.class = "Application_Job_CheckWorkspaceFilesJob"
checkWorkspaceFilesTask.schedule = "*/1 * * * *"
checkWorkspaceFilesTask.preventOverlapping = false
