<?xml version="1.0" encoding="UTF-8"?>
<project name="opus4server" default="build" xmlns:if="ant:if" xmlns:unless="ant:unless">

    <property environment="env" />
    <property name="testpath" value="" />
    <property name="codingstandard" location="${basedir}/vendor/opus4-repo/codesniffer/ruleset.xml" />
    <property name="adminPassword" value="AdminAdmin" />
    <property name="bindir" value="${basedir}/vendor/bin" />
    <property name="verbose" value="" />
    <property name="solrVersion" value="5.5.5" />
    <property name="downloadDir" value="${basedir}/downloads" />

    <!-- Properties for configuration files (config.ini, console.ini, tests/config.ini) used for testing. -->
    <property name="dbName" value="opusdb" />
    <property name="dbUserName" value="opus4admin" />
    <property name="dbUserPassword" value="" />
    <property name="dbAdminName" value="opus4" />
    <property name="dbAdminPassword" value="" />
    <property name="solrIndexHost" value="localhost" />
    <property name="solrIndexPort" value="8983" />
    <property name="solrIndexPath" value="/solr/opus4" />
    <property name="solrExtractHost" value="localhost" />
    <property name="solrExtractPort" value="8983" />
    <property name="solrExtractPath" value="/solr/opus4" />

    <target name="analyse-code" depends="phpcs,phpmd,phpcpd,phploc" />

    <target name="build" depends="clean,prepare,lint,pdepend,analyse-code,phpdoc"
            description="" />

    <target name="build-parallel" depends="prepare,tools-parallel" />

    <target name="build-fast" depends="clean,prepare,lint,phpunit-fast" description="" />

    <target name="tools-parallel">
        <parallel threadCount="2">
            <sequential>
                <antcall target="pdepend" />
                <antcall target="phpmd" />
            </sequential>
            <antcall target="phpcpd" />
            <antcall target="phpcs" />
            <antcall target="phploc" />
            <antcall target="phpdoc" />
        </parallel>
    </target>

    <target name="clean" depends="clean-cache">
        <delete dir="${basedir}/build/logs" />
        <delete dir="${basedir}/build/api" />
        <delete dir="${basedir}/build/coverage" />
        <delete dir="${basedir}/build/pdepend" />
        <delete dir="${basedir}/build/code-browser" />
        <delete dir="${basedir}/build/release" />

        <delete includeemptydirs="true">
            <fileset dir="${basedir}/workspace/tmp" includes="**/*" />
        </delete>
    </target>

    <target name="clean-cache">
        <delete>
            <fileset dir="${basedir}/workspace/cache" includes="*cache*-*" />
        </delete>
        <delete>
            <fileset dir="${basedir}/tests/workspace/cache" includes="*cache*-*" />
        </delete>
    </target>

    <target name="setup" depends="prepare-workspace,prepare-test-workspace,prepare-dependencies,prepare-javascript,prepare-config" />

    <target name="prepare-workspace">
        <mkdir dir="${basedir}/workspace/cache" />
        <mkdir dir="${basedir}/workspace/export" />
        <mkdir dir="${basedir}/workspace/files" />
        <mkdir dir="${basedir}/workspace/incoming" />
        <mkdir dir="${basedir}/workspace/log" />
        <mkdir dir="${basedir}/workspace/tmp" />
        <mkdir dir="${basedir}/workspace/tmp/resumption" />
    </target>

    <target name="prepare-test-workspace">
        <mkdir dir="${basedir}/tests/workspace/cache" />
        <mkdir dir="${basedir}/tests/workspace/export" />
        <mkdir dir="${basedir}/tests/workspace/files" />
        <mkdir dir="${basedir}/tests/workspace/incoming" />
        <mkdir dir="${basedir}/tests/workspace/log" />
        <mkdir dir="${basedir}/tests/workspace/tmp" />
        <mkdir dir="${basedir}/tests/workspace/tmp/resumption" />
    </target>

    <target name="prepare" depends="clean,prepare-dependencies">
        <mkdir dir="${basedir}/build/logs" />
        <mkdir dir="${basedir}/build/coverage" />
        <mkdir dir="${basedir}/build/api" />
        <mkdir dir="${basedir}/build/pdepend" />
    </target>

    <target name="prepare-dependencies">
        <exec executable="php" dir="${basedir}">
            <arg value="composer.phar" />
            <arg value="update" />
        </exec>
        <exec executable="${basedir}/bin/install-composer.sh" />
        <symlink link="${basedir}/db/schema" resource="${basedir}/vendor/opus4-repo/framework/db/schema"
                 failonerror="false" />
    </target>

    <target name="prepare-javascript">
        <mkdir dir="${basedir}/public/js" />
        <symlink link="${basedir}/public/js/jquery.js" resource="${basedir}/components/jquery/jquery.js"
                 failonerror="false" />
    </target>

    <target name="prepare-config" description="Prepares the configuration files">
        <!-- Prepare script for rebuilding database. --> <!-- TODO not really necessary anymore -->
        <chmod file="${basedir}/tests/rebuilding_database.sh" perm="+x" />

        <!-- Prepare test configuration. -->
        <copy file="${basedir}/tests/config.ini.template" toFile="${basedir}/tests/config.ini" filtering="true"
              overwrite="true">
            <filterset>
                <filter token="db.user.name" value="${dbUserName}" />
                <filter token="db.user.password" value="${dbUserPassword}" />
                <filter token="db.admin.name" value="${dbAdminName}" />
                <filter token="db.admin.password" value="${dbAdminPassword}" />
                <filter token="db.name" value="${dbName}" />
                <filter token="searchengine.index.host" value="${solrIndexHost}" />
                <filter token="searchengine.index.port" value="${solrIndexPort}" />
                <filter token="searchengine.index.app" value="${solrIndexPath}" />
                <filter token="searchengine.extract.host" value="${solrExtractHost}" />
                <filter token="searchengine.extract.port" value="${solrExtractPort}" />
                <filter token="searchengine.extract.app" value="${solrExtractPath}" />
            </filterset>
        </copy>

        <!-- Prepare main configuration. Needed for scripts like SolrIndexBuilder. -->
        <copy file="${basedir}/application/configs/config.ini.template"
              toFile="${basedir}/application/configs/config.ini" filtering="true" overwrite="true">
            <filterset>
                <filter token="db.user.name" value="${dbUserName}" />
                <filter token="db.user.password" value="${dbUserPassword}" />
                <filter token="db.admin.name" value="${dbAdminName}" />
                <filter token="db.admin.password" value="${dbAdminPassword}" />
                <filter token="db.name" value="${dbName}" />
                <filter token="searchengine.index.host" value="${solrIndexHost}" />
                <filter token="searchengine.index.port" value="${solrIndexPort}" />
                <filter token="searchengine.index.app" value="${solrIndexPath}" />
                <filter token="searchengine.extract.host" value="${solrExtractHost}" />
                <filter token="searchengine.extract.port" value="${solrExtractPort}" />
                <filter token="searchengine.extract.app" value="${solrExtractPath}" />
            </filterset>
        </copy>

        <copy file="${basedir}/application/configs/console.ini.template"
              toFile="${basedir}/application/configs/console.ini" filtering="true" overwrite="true">
            <filterset>
                <filter token="db.user.name" value="${dbUserName}" />
                <filter token="db.user.password" value="${dbUserPassword}" />
                <filter token="db.admin.name" value="${dbAdminName}" />
                <filter token="db.admin.password" value="${dbAdminPassword}" />
                <filter token="db.name" value="${dbName}" />
                <filter token="searchengine.index.host" value="${solrIndexHost}" />
                <filter token="searchengine.index.port" value="${solrIndexPort}" />
                <filter token="searchengine.index.app" value="${solrIndexPath}" />
                <filter token="searchengine.extract.host" value="${solrExtractHost}" />
                <filter token="searchengine.extract.port" value="${solrExtractPort}" />
                <filter token="searchengine.extract.app" value="${solrExtractPath}" />
            </filterset>
        </copy>
    </target>

    <target name="lint" description="PrÃ¼ft, ob PHP Dateien Syntaxfehler enthalten.">
        <apply executable="php" dir="${basedir}" failonerror="on" logerror="on">
            <arg line="-l"/>
            <fileset dir="${basedir}" followsymlinks="false">
                <include name="**/*.php" />
                <modified />
                <exclude name="vendor/**" />
            </fileset>
        </apply>
    </target>

    <target name="phploc" description="">
        <exec executable="${bindir}/phploc">
            <arg value="--log-csv" />
            <arg value="${basedir}/build/logs/phploc.csv" />
            <arg path="${basedir}/modules" /> <!-- TODO library code -->
        </exec>
    </target>

    <target name="phpdoc">
        <exec executable="${bindir}/phpdoc" dir="${basedir}" logerror="on">
            <arg value="--directory" />
            <arg path="${basedir}/modules" />
            <arg value="--target" />
            <arg path="${basedir}/build/api" />
        </exec>
    </target>

    <target name="phpcs">
        <echo message="Coding Standard = '${codingstandard}'" />
        <exec executable="${bindir}/phpcs" dir="${basedir}" output="${basedir}/build/logs/checkstyle.xml"
              error="${basedir}/build/logs/checkstyle-error.log">
            <arg value="--report=checkstyle" />
            <arg value="--standard=${codingstandard}" />
            <arg value="--ignore=${basedir}/Opus,${basedir}/Zend" />
            <arg path="${basedir}/modules" />
            <arg path="${basedir}/library" />
            <arg path="${basedir}/scripts" />

        </exec>
    </target>

    <target name="phpmd">
        <exec executable="${bindir}/phpmd" dir="${basedir}" logerror="on" output="${basedir}/build/logs/pmd.xml" >
            <arg line="--exclude tests,vendor" />
            <arg line="." />
            <arg line="xml" />
            <arg line="codesize,unusedcode,naming,design" />
        </exec>
    </target>

    <target name="phpcpd">
        <exec executable="${bindir}/phpcpd" dir="${basedir}" logerror="on" >
            <arg line="--min-lines 3" />
            <arg line="--min-tokens 30" />
            <arg line="--log-pmd ${basedir}/build/logs/pmd-cpd.xml" />
            <arg line="./library ./modules ./scripts" />
        </exec>
    </target>

    <target name="pdepend" depends="phpunit" description="Generates software metrics charts.">
        <exec executable="${bindir}/pdepend" dir="${basedir}" logerror="on">
            <arg line="--coverage-report=${basedir}/build/logs/phpunit.coverage.xml" />
            <arg line="--jdepend-xml=${basedir}/build/logs/jdepend.xml" />
            <arg line="--jdepend-chart=${basedir}/build/pdepend/dependencies.svg" />
            <arg line="--overview-pyramid=${basedir}/build/pdepend/overview-pyramid.svg" />
            <arg line="--suffix=php,phtml" />
            <arg line="--coderank-mode=inheritance,property,method" />
            <arg line="--ignore=tests" />
            <arg line="${basedir}/library,${basedir}/modules,${basedir}/scripts" />
        </exec>
    </target>

    <target name="phpcb" description="Aggregates tool output with PHP_CodeBrowser.">
        <exec executable="${bindir}/phpcb">
            <arg value="--log" />
            <arg path="${basedir}/build/logs" />
            <arg value="--source" />
            <arg path="${basedir}/modules" />
            <arg value="--output" />
            <arg path="${basedir}/build/code-browser" />
        </exec>
    </target>

    <target name="rebuild-database">
        <exec executable="./rebuilding_database.sh" dir="${basedir}/tests" failonerror="on">
            <arg line="-v" unless:blank="${verbose}"/>
        </exec>
    </target>

    <target name="rebuild-index">
        <exec executable="php" dir="${basedir}/scripts" failonerror="on">
            <arg line="SolrIndexBuilder.php" />
        </exec>
    </target>

    <target name="phpunit" depends="rebuild-database,rebuild-index" description="Runs unit tests with coverage">
        <exec executable="${bindir}/phpunit" dir="${basedir}/tests" failonerror="true">
            <arg line="--log-junit ${basedir}/build/logs/phpunit.xml" />
            <arg line="--coverage-clover ${basedir}/build/logs/phpunit.coverage.xml" />
            <arg line="--coverage-html ${basedir}/build/coverage" />
            <arg line="--configuration phpunit.xml"/>
            <arg line="${testpath}" />
        </exec>
    </target>

    <target name="phpunit-fast" depends="rebuild-database,rebuild-index" description="Runs unit tests without coverage">
        <tstamp />
        <exec executable="${bindir}/phpunit" dir="${basedir}/tests" failonerror="true">
            <arg line="--log-junit ${basedir}/build/logs/phpunit.xml" />
            <arg line="--configuration phpunit.xml" />
            <!--arg line="-debug" /-->
            <arg line="${testpath}" />
            <redirector output="build/testresult-${DSTAMP}-${TSTAMP}.txt" alwayslog="true" />
        </exec>
    </target>

    <target name="test" depends="rebuild-database,rebuild-index" description="Runs all tests in blocks.">
        <tstamp />
        <echo message="${line.separator}Running 'library' tests ..." />
        <exec executable="${bindir}/phpunit" dir="${basedir}/tests" failonerror="false">
            <arg line="--log-junit ${basedir}/build/logs/phpunit.xml" />
            <arg line="--configuration phpunit.xml" />
            <arg line="--testsuite library" />
            <redirector output="build/testresult-${DSTAMP}-${TSTAMP}.txt" alwayslog="true" append="true" />
        </exec>
        <echo message="${line.separator}Running 'modules' tests (without 'admin') ..." />
        <exec executable="${bindir}/phpunit" dir="${basedir}/tests" failonerror="false">
            <arg line="--log-junit ${basedir}/build/logs/phpunit.xml" />
            <arg line="--configuration phpunit.xml" />
            <arg line="--testsuite modules" />
            <redirector output="build/testresult-${DSTAMP}-${TSTAMP}.txt" alwayslog="true" append="true" />
        </exec>
        <echo message="${line.separator}Running 'admin' module tests ..." />
        <exec executable="${bindir}/phpunit" dir="${basedir}/tests" failonerror="false">
            <arg line="--log-junit ${basedir}/build/logs/phpunit.xml" />
            <arg line="--configuration phpunit.xml" />
            <arg line="--testsuite admin" />
            <redirector output="build/testresult-${DSTAMP}-${TSTAMP}.txt" alwayslog="true" append="true" />
        </exec>
        <echo message="${line.separator}Running 'scripts' tests ..." />
        <exec executable="${bindir}/phpunit" dir="${basedir}/tests" failonerror="false">
            <arg line="--log-junit ${basedir}/build/logs/phpunit.xml" />
            <arg line="--configuration phpunit.xml" />
            <arg line="--testsuite scripts" />
            <redirector output="build/testresult-${DSTAMP}-${TSTAMP}.txt" alwayslog="true" append="true" />
        </exec>
        <echo message="${line.separator}Running 'security' tests ..." />
        <exec executable="${bindir}/phpunit" dir="${basedir}/tests" failonerror="false">
            <arg line="--log-junit ${basedir}/build/logs/phpunit.xml" />
            <arg line="--configuration phpunit.xml" />
            <arg line="--testsuite security" />
            <redirector output="build/testresult-${DSTAMP}-${TSTAMP}.txt" alwayslog="true" append="true" />
        </exec>
    </target>

    <target name="reset-testdata" depends="rebuild-database,rebuild-index,clean-cache">
    </target>

    <target name="demo-reset" depends="rebuild-database,demo-prepare-docs,rebuild-index,demo-reset-password">
    </target>

    <target name="demo-reset-password">
        <exec executable="php" dir="${basedir}/scripts" failonerror="true">
            <arg line="change-password.php" />
            <arg line="admin" />
            <arg line="${adminPassword}" />
        </exec>
    </target>

    <target name="demo-prepare-docs">
        <exec executable="php" dir="${basedir}/scripts" failonerror="true">
            <arg line="opus-console.php" />
            <arg line="snippets/delete_non-demo_docs.php" />
        </exec>
    </target>

    <target name="remove-hhar-files">
        <exec executable="php" dir="${basedir}/scripts" failonerror="true">
            <arg line="opus-console.php" />
            <arg line="snippets/delete_files.php" />
        </exec>
    </target>

    <target name="download-solr">
        <mkdir dir="${downloadDir}" />
        <get src="https://archive.apache.org/dist/lucene/solr/${solrVersion}/solr-${solrVersion}.tgz"
             dest="${downloadDir}/solr-${solrVersion}.tgz"
             skipexisting="true" />
        <exec executable="tar" dir="${downloadDir}">
            <arg line="xfz" />
            <arg line="solr-${solrVersion}.tgz" />
            <arg line="-C ${basedir}" />
        </exec>
    </target>

</project>
